struct Funder :
  sender: address
  value: uint256
end
funders: HashMap[int128, Funder]
nextFunderIndex: int128
beneficiary: address
deadline: public(uint256)
goal: public(uint256)
refundIndex: int128
timelimit: public(uint256)
@external
def __init__(_beneficiary: address, _goal: uint256, _timelimit: uint256):
    self.beneficiary = _beneficiary
    self.deadline = block.timestamp + _timelimit
    self.timelimit = _timelimit
    self.goal = _goal
end
@external
@payable
def participate():
    nfi: int128 = self.nextFunderIndex
    self.funders[nfi] = Funder({sender: msg.sender, value: msg.value})
    self.nextFunderIndex = nfi + 1
end
@external
def finalize():
    assert block.timestamp >= self.deadline 
    assert self.balance >= self.goal 
    selfdestruct(self.beneficiary)
end
@external
def refund():
    assert block.timestamp >= self.deadline and self.balance < self.goal
    ind: int128 = self.refundIndex
    for i in range(ind, ind + 30):
        if i >= self.nextFunderIndex:
            self.refundIndex = self.nextFunderIndex
            return
        end
    end
    self.refundIndex = ind + 30
end