
struct Bid:
  blindedBid: bytes32
  deposit: uint256
end
MAX_BIDS: constant(int128) = 2

event AuctionEnded:
    highestBidder: address
    highestBid: uint256
end 

beneficiary: public(address)
biddingEnd: public(uint256)
revealEnd: public(uint256)

ended: public(bool)

highestBid: public(uint256)
highestBidder: public(address)

bids: HashMap[address, Bid[128]]
bidCounts: HashMap[address, int128]

pendingReturns: HashMap[address, uint256]
@external
def __init__(_beneficiary: address, _biddingTime: uint256, _revealTime: uint256):
    self.beneficiary = _beneficiary
    self.biddingEnd = block.timestamp + _biddingTime
    self.revealEnd = self.biddingEnd + _revealTime
end
@external
@payable
def bid(_blindedBid: bytes32):
    assert block.timestamp < self.biddingEnd
    numBids: int128 = self.bidCounts[msg.sender]
    assert numBids < MAX_BIDS 
    self.bids[msg.sender][numBids] = Bid({blindedBid: _blindedBid, deposit: msg.value })
    self.bidCounts[msg.sender] += 1
end
def placeBid(bidder: address, _value: uint256) -> bool :
    if (_value <= self.highestBid):
        return False
    end ;
    if (self.highestBidder != ZERO_ADDRESS):
        self.pendingReturns[self.highestBidder] += self.highestBid
    end ;
    self.highestBid = _value
    self.highestBidder = bidder
    return True
end
@external
def reveal(_numBids: int128, _values: uint256[2], _fakes: bool[2], _secrets: bytes32[2]):
    assert block.timestamp > self.biddingEnd
    assert block.timestamp < self.revealEnd
    assert _numBids == self.bidCounts[msg.sender]
    refund: uint256 = 0
    for i in range(MAX_BIDS):
        if (i >= _numBids):
            break
        end ;
        bidToCheck: Bid = self.bids[msg.sender][i]
        value: uint256 = _values[i]
        fake: bool = _fakes[i]
        secret: bytes32 = _secrets[i]
        blindedBid: bytes32 = keccak256(concat(convert(value, bytes32), convert(fake, bytes32), secret))
        if (blindedBid != bidToCheck.blindedBid):
            assert 1 == 0
            continue
        end ;
        refund += bidToCheck.deposit
        if (not fake and bidToCheck.deposit >= value):
            if (self.placeBid(msg.sender, value)):
                refund -= value
            end ;
        end ;
        zeroBytes32: bytes32 = EMPTY_BYTES32
        bidToCheck.blindedBid = zeroBytes32
    end ;
    if (refund != 0):
        send(msg.sender, refund)
    end ;
end
@external
def withdraw():
    pendingAmount: uint256 = self.pendingReturns[msg.sender]
    if (pendingAmount > 0):
        self.pendingReturns[msg.sender] = 0
        send(msg.sender, pendingAmount)
    end ;
end
@external
def auctionEnd():
    assert block.timestamp > self.revealEnd
    assert not self.ended
    log AuctionEnded(self.highestBidder, self.highestBid)
    self.ended = True
    send(self.beneficiary, self.highestBid)
end