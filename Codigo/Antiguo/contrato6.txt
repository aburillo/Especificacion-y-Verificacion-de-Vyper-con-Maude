event Transfer:
    sender: indexed(address)
    receiver: indexed(address)
    value: uint256
end
event Buy:
    buyer: indexed(address)
    buy_order: uint256
end
event Sell:
    seller: indexed(address)
    sell_order: uint256
end
event Pay:
    vendor: indexed(address)
    amount: uint256
end
company: public(address)
totalShares: public(uint256)
price: public(uint256)
holdings: HashMap[address, uint256]
@external
def __init__(_company: address, _total_shares: uint256, initial_price: uint256):
    assert _total_shares > 0
    assert initial_price > 0
    self.company = _company
    self.totalShares = _total_shares
    self.price = initial_price
    self.holdings[self.company] = _total_shares
end
@view
@internal
def _stockAvailable() -> uint256:
    return self.holdings[self.company]
end
@view
@external
def stockAvailable() -> uint256:
    return self._stockAvailable()
end
@external
@payable
def buyStock():
    buy_order: uint256 = msg.value / self.price 
    assert self._stockAvailable() >= buy_order
    self.holdings[self.company] -= buy_order
    self.holdings[msg.sender] += buy_order
    log Buy(msg.sender, buy_order)
end
@view
@internal
def _getHolding(_stockholder: address) -> uint256:
    return self.holdings[_stockholder]
end
@view
@external
def getHolding(_stockholder: address) -> uint256:
    return self._getHolding(_stockholder)
end
@view
@external
def cash() -> uint256:
    return self.balance
end
@external
def sellStock(sell_order: uint256):
    assert sell_order > 0 
    assert self._getHolding(msg.sender) >= sell_order
    assert self.balance >= (sell_order * self.price)
    self.holdings[msg.sender] -= sell_order
    self.holdings[self.company] += sell_order
    send(msg.sender, sell_order * self.price)
    log Sell(msg.sender, sell_order)
end
@external
def transferStock(receiver: address, transfer_order: uint256):
    assert transfer_order > 0
    assert self._getHolding(msg.sender) >= transfer_order
    self.holdings[msg.sender] -= transfer_order
    self.holdings[receiver] += transfer_order
    log Transfer(msg.sender, receiver, transfer_order)
end
@external
def payBill(vendor: address, amount: uint256):
    assert msg.sender == self.company
    assert self.balance >= amount
    send(vendor, amount)
    log Pay(vendor, amount)
end
@view
@internal
def _debt() -> uint256:
    return (self.totalShares - self._stockAvailable()) * self.price
end
@view
@external
def debt() -> uint256:
    return self._debt()
end
@view
@external
def worth() -> uint256:
    return self.balance - self._debt()
end