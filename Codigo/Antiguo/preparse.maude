fmod PREPARSE is
 pr CONVERSION .
 pr QID-LIST .

 var S S1 S2 S3 S4 : QidList .
 var Q Q1 Q' : Qid .
 var N : Nat .
 vars St St' : String .
 op preparse : QidList -> QidList .
 ***aÃ±adir PAV en los parentesis vacios que vengan con un def
 eq preparse('`def S '`( '`) S2) = '`def preparse(S) '`( 'PaV '`) preparse(S2) .
*** eliminar self.
ceq preparse(S Q S1) = preparse(S Q' S1)
 if St := string(Q) /\
    N := find(St, "self.", 0) /\
    St' := substr(St, N + 5, length(St)) /\
    Q' := qid(St') [print N] .
 ***eq preparse(S 'self. S2) = preparse(S) preparse(S2) .
***eq preparse(S Q S2) = preparse(S) preparse('Q) `: preparse(S2) . 
 
 eq preparse(S) = S [owise] .
endfm
*** quitar self.
--- vars QIL QIL' : QidList .
--- var  Q : Qid .
--- vars S S' : String .

--- ceq preparse(QIL Q QIL') = preparse(QIL Q' QIL')
---  if S := string(Q) /\
---     N := find(S, "self.", 0) /\
---     S' := substr(S, N, len(S)) /\
---     Q' := qid(S') .
*** sustituir  : por ::
--- vars QIL QIL' : QidList .
--- var  Q : Qid .
--- vars S S' : String .

--- ceq preparse(QIL Q QIL') = preparse(QIL Q' QIL')
---  if S := string(Q) /\
---     N := find(S, "self.", 0) /\
---     S' := substr(S, N, len(S)) /\
---     Q' := qid(S') .

--- op preparse : QidList -> QidList .
--- ceq preparse(QIL) = preparseFinal(QIL'' QIL''')
---  if QIL' := hastaPrimerDef(QIL) /\
---     QIL'' := preparseAntes(QIL') /\
---     QIL''' := despuesPrimerDef(QIL)  .

--- op hastaPrimerDef : QidList -> QidList .
--- ceq hastaPrimerDef(Q QIL) = Q hastaPrimerDef