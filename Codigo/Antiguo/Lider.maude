mod Lider is
	pr QID .
	sorts Mode Atributo AtributoSet Node Msg Sis .
	subsort Atributo < AtributoSet .
	subsort Msg Node < Sis .
	ops idle activo lider : -> Mode [ctor] .
	op mt : -> AtributoSet [ctor] .
	op _,_ : AtributoSet AtributoSet -> AtributoSet [ctor assoc comm id: mt] .
	op modo:_ : Mode -> Atributo [ctor] .
	op prioridad:_ : Nat -> Atributo [ctor] .
	op siguiente:_ : Qid -> Atributo [ctor] .
	op <_|_> : Qid AtributoSet -> Node [ctor] .
	op to_:_ : Qid Nat -> Msg [ctor] .
	op none : -> Sis [ctor] .
	op __ : Sis Sis -> Sis [ctor assoc comm id: none] .
	var Ats : AtributoSet .
	vars N N' : Nat .
	vars O O' : Qid .
	rl [activar] : < O | modo : idle , siguiente : O' , prioridad : N  > => < O | modo : activo , siguiente : O' , prioridad : N > (to O' : N) .
 	crl [borrar] : (to O : N) < O | modo : activo , prioridad : N' , Ats > => < O | modo : activo , prioridad : N' , Ats > 
	 if N < N' .
	crl [reenviar] : (to O : N) < O | modo : activo , siguiente : O' , prioridad : N' > => < O | modo : activo , siguiente : O' , prioridad : N' > (to O' : N)
	 if N > N' .
	rl [lider] : (to O : N) < O | modo : activo , prioridad : N , Ats > => < O | modo : lider , prioridad : N , Ats > .
	op init : -> Sis .
	eq init = < 'n1 | modo : idle, prioridad : 1, siguiente : 'n2 >
			  < 'n2 | modo : idle, prioridad : 2, siguiente : 'n3 >
			  < 'n3 | modo : idle, prioridad : 3, siguiente : 'n4 >
			  < 'n4 | modo : idle, prioridad : 4, siguiente : 'n5 >
			  < 'n5 | modo : idle, prioridad : 5, siguiente : 'n1 > .
endm


	