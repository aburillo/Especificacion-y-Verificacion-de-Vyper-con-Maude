struct Juego :
    apostador : address
    equipo1 : uint256
    equipo2 : uint256
    apuesta : uint256
end
casa : public(address)
inicial : public (uint256)
empieza : public (uint256)
termina : public (uint256)
pequipo1 : uint256
pequipo2 : uint256
indice : uint256
apostadores : HashMap [uint256 ,Juego]
sigindice : uint256
invertido : bool
apuntados : bool

@payable
@external
def __init__( tiempo_inicio: uint256 , duracion: uint256 ):
    assert tiempo_inicio > 0
    assert duracion > 0
    self.inicial = msg.value
    self.casa = msg.sender
    self.empieza = block.timestamp + tiempo_inicio
    self.termina = self.empieza + duracion
end
@external
@payable
def apostar (eq1: uint256 , eq2: uint256 ) :
    assert block.timestamp <= self.empieza,"Antes de empezar"
    assert msg.sender != self.casa,"Jugador"
    assert msg.value > 0 ,"Apuesta positiva"
    nfi: uint256 = self.indice
    self.apostadores [ nfi ] = Juego ({apostador : msg.sender , equipo1 : eq1 , equipo2 : eq2 ,apuesta : msg.value})
    self.indice = nfi + 1
end
@view
@external
def necesario() -> uint256 :
    assert msg.sender == self.casa,"Casa"
    assert  block.timestamp > self.empieza,"Despues de empezar"
    return ( self.balance - self.inicial ) / 2
end
@payable
@external
def mitad():
    assert block.timestamp > self.empieza,"Despues de empezar"
    assert self.casa == msg.sender,"Casa"
    assert msg.value + self.inicial  >= ((self.balance - self.inicial - msg.value) / 2),"Valor suficiente"
    self.invertido = True
end
@external
def ganadores ( _eq1 : uint256 , _eq2 : uint256 ):
    assert msg.sender == self.casa
    assert block.timestamp > self.termina 
    assert not self.apuntados
    self.apuntados = True
    self.pequipo1 = _eq1
    self.pequipo2 = _eq2
end
@external
def devolver() :
    assert self.apuntados,"Apuntados"
    assert self.casa == msg.sender,"Casa"
    assert self.invertido,"Ha invertido"
    nive : uint256 = self.sigindice
    for i in range ( nive , nive + 30) :
        if i > self.indice :
            selfdestruct (self.casa )
        else:
            if (( self.apostadores[i].equipo1 == self.pequipo1 ) and ( self.apostadores[i].equipo2 == self.pequipo2) ) :
                send (self.apostadores[i].apostador , self.apostadores[i].apuesta + ( self.apostadores[i].apuesta / 2) )
                self.sigindice = nive + 30
                end ;
        end ;
    end ;
end
@external
def ganadores(_eq1: uint256, _eq2: uint256):
    assert msg.sender == self.casa,"Casa"
    assert block.timestamp > self.termina,"Despues de terminar"
    assert not self.apuntados,"No apuntados"
    self.apuntados = True
    self.pequipo1 = _eq1
    self.pequipo2 = _eq2
end
@view
@external
def terminado()-> bool:
    return block.timestamp > self.termina
end
@view
@external
def empezado() -> bool:
    return block.timestamp > self.empieza
end
@view
@external
def ganar(apos: Juego)-> uint256:
    return apos.apuesta + (apos.apuesta / 2)
end
@view
@external
def ganado(apos: Juego)-> bool:
    assert self.apuntados
    return (apos.equipo1 == self.pequipo1) and (apos.equipo2 == self.pequipo2)
end