load preparse.maude
load file.maude
load vyper.maude
fmod PARSING is
 pr META-LEVEL .
 pr CONVERSION .
 pr META-SIGN .
 pr PREPARSE .
 sort ParsingRes .

subsort Term < ParsingRes  .

vars T T1 T1' T2 T2' T3 T3' T4 T4' T5 T5' T6 T6' : Term .
vars TL TL' TL2 TL2' TL3 TL3' : TermList .
vars M M1 M2 M3 : Module .
vars  Ct : Constant .
vars  S S1 S2 S4 S3 : String .
vars  F : Float .
vars  Q Q1 : Qid .
vars B B1 : Bool .
vars N : Nat .

op parse : Term -> ParsingRes .

*** parse the comma of the bubbles
ceq parse('token[T]) = Q1 
if Q := downQid(T) /\
   S := string(Q) /\
   S == "`," /\
   S1 := "," + ".eliminar" /\
   Q1 := qid(S1) [print "eq comma: " Q1 ] .
 
*** parse boolean
ceq parse('token[T]) =  Q1
if Q := downQid(T) /\
   S := string(Q) /\
   isBool(S) /\
   S1 := S + ".bool" /\
   Q1 := qid(S1) [print "eq bool: " S ] .

*** parse control flow
ceq parse(T) =  Q1
if S := string(T) /\
   isControlFlow(S) /\
   N := find(S, ".", 0) /\ 
   S1 := substr(S, 0, N) /\
   S2 := S1 + ".controlFlow" /\
   Q1 := qid(S2) [print "eq control flow: " S ] .

***parse internal external decorator
ceq parse(T) =  Q
if  S := string(T) /\ 
      isDecorador(S) /\ 
      N := find(S, ".", 0) /\ 
      S1 := substr(S, 0, N) /\
      S2 := S1 + ".Decorator" /\
      Q := qid(S2) [print "eq IE decorator: " Q ] .

*** parse type
ceq parse('token[T]) =  Q1
if Q := downQid(T) /\
   S := string(Q) /\
   isType(S) /\
   S1 := S + ".type" /\
   Q1 := qid(S1) [print "eq type: " Q1 ] .

*** parse environment variable
ceq parse('token[T]) =  Q1
if Q := downQid(T) /\
   S := string(Q) /\
   isEnVar(S) /\
   S1 := S + ".VarEnt" /\
   Q1 := qid(S1) [print "eq environment variable: " Q1 ] .

*** parse constant
ceq parse('token[T]) =  Q1
if Q := downQid(T) /\
   S := string(Q) /\
   isConstant(S) /\
   S1 := S + ".constant" /\
   Q1 := qid(S1) [print "eq constant: " Q1 ] .

*** parse empty parameters
ceq parse(T) = Q
if   S := string (T) /\
      S == "PaV.@Parameters@" /\
      S1 := substr(S, 0, 4) /\
      S2 := S1 + "Parameters" /\
      Q := qid(S2) [print "eq empty parameters(PAV): " Q] .
     
*** parse float
ceq parse('token[T]) =  upTerm(F)
if Q := downQid(T) /\
   S := string(Q) /\
   F := float(S) .

*** parse int to float
ceq parse('token[T]) =  upTerm(F)
if Q := downQid(T) /\
   S := string(Q) /\
   rat(S, 10) :: Nat /\
   F := float(S + ".0") .

*** parse qid
ceq parse('token[T]) =  T
if Q := downQid(T) /\
   S := string(Q) /\
   not (float(S) :: Float) /\
   not (rat(S, 10) :: Nat) /\
   not isBool(S) /\
   not isType(S)  /\
   not isEnVar(S) [print "eq qid: " S ] .

*** parse logname
ceq parse('logName[T]) =  T1
if T1 := parse('token[T])  [print "eq logname: " T].

*** parsea bubble
ceq parse('bubble['__[TL]]) =  TL'
if TL' := parseB(TL) [print "eq bubble" TL ] .

*** parse individual bubble
ceq parse('bubble[TL]) =  TL'
if TL' := parseB(TL) [print "eq individual bubble: " TL ] .

***parse statement
ceq parse('_::_[T1,T2]) =  'D[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "eq statement: " T1' ] .

*** parse public statement
ceq parse('_::`public`(_`)[T1,T2]) =  'Dp[T1', T2', upTerm("public") ]
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "eq public statement:" T1' ] .

***parse statement initial value
ceq parse('_:_=_[T1,T2,T3]) =  'Dv[T1', T2', T3']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      T3'  := parse (T3) [print "eq initial value:" T1 ] .

*** parse constant statement
ceq parse('_::`constant`(_`)=_[T1,T2,T3]) =  'Dc[T1', T2', T3' , upTerm("constant") ]
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      T3'  := parse (T3) [print "eq constant statement: " T1 ] .

***parse hashmap statement
ceq parse('_::`HashMap`[_`,_`] [T1,T2,T3]) =  'Dhm[T1', T2', T3']
   if  T1' := parse (T1) /\
      T2' := parse (T2) /\
      T3' := parse (T3) [print "eq hashmap statement:" T1 ] .

***parse public hashmap statement
ceq parse('_::`public`(HashMap`[_`,_`]`)[T1,T2,T3]) =  'DhmP[T1', T2', T3', upTerm("public")]
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      T3'  := parse (T3)  [print "eq public hashmap statement: " T1 ] .
      
*** parse struct statement
ceq parse('struct_::_end[T1,TL]) =  'Ds[T1', TL']
   if  T1'  := parse (T1) /\
      TL'  := parse (TL) [print "eq struct statement :" T1 ] .

***Events
*** parse indexed statement
ceq parse('_::`indexed`(_`)[T1,T2]) =  'Di[T1', T2', upTerm("indexed")]
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "eq indexed statement:" T1 ] .

***parse event
ceq parse('event_::_end[T1,TL]) =  'De[T1', TL']
   if  T1'  := parse (T1) /\
      TL'  := parse (TL) [print "eq event:" T1 ] .    

*** parse contract
ceq parse('__[TL]) =  'Contract[TL']
   if  isContract(TL) /\
   TL'  := parseL (TL) [print "eq Contract" TL ] .

*** parse functions list
ceq parse('__[TL]) =  'ListF[TL']
   if  isFun(TL) /\
   TL' := parseL (TL) [print "eq functions:" TL ] .

*** parse elif list
ceq parse('__[TL]) =  'ListaEIF[TL']
      if  isElif(TL) /\
      TL' := parseL (TL) [print "eq elif list:"  ] .

***parse statements list
ceq parse('__[TL]) =  'ListS[TL']
   if  TL'  := parseL (TL) [print "eq list statements:" TL ] .

***Memory access

***parse access to array
ceq parse('_`[_`][T1,T2]) = '->[T1' , T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "access array:" T1' ] .

***parse access to struct
ceq parse('_._[T1,T2]) = '.[T1' , T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "access struct:" T1' ] .


*** parse assignments

*** parse assignments equal
ceq parse('_=_[T1,T2]) = '=[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "assignment = :" T1' ] .

*** parse assignment plus equal
ceq parse('_+=_[T1,T2]) = '+=[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "assignment +=:" T1' ] .

*** parse assignment minus equal
ceq parse('_-=_[T1,T2]) = '-=[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "assignment -=:" T1' ] .

*** parse struct assignment
ceq parse('_=_`(`{_`}`)[T1,T2,TL]) = '=St[T1', T2', TL']
   if  T1'  := parse (T1) /\
   T2'  := parse (T2) /\
   TL'  := parse (TL) [print "assignment {}:" TL' ] .

*** parse FOR

*** parse for in
ceq parse('for_in_:_end[T1,T2,TL]) =  'ForVar[T1', T2', TL']
if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      TL'  := parse (TL) .

***parse for range
ceq parse('for_in`range`(_`):_end[T1,T2,TL]) =  'ForR[T1', TL2', TL']
if  T1'  := parse (T1) /\
      TL2'  := parse (T2) /\
      TL'  := parse(TL) .

*** parse for in list
ceq parse('for_in`[_`];_end[T1,T2,TL]) =  'ForList[T1', TL2', TL']
if  T1'  := parse (T1) /\
      TL2'  := parse (T2) /\
      TL'  := parseL (TL) [print "eq for list:" TL ] .

***parse if else

*** parse simple if
ceq parse('if_:_end[T1,TL]) =  'If[T1', TL']
if  T1'  := parse (T1) /\
      TL'  := parseL (TL)  [print "eq simple if: " TL ] .

*** parse if-else
ceq parse('if_:_else:_end[T1,TL,TL2]) =  'IfElse[T1', TL', TL2']
if  T1'  := parse (T1) /\
      TL'  := parseL (TL) /\
      TL2'  := parseL (TL2) [print "eq if-else: " TL ] .

*** parse elif
ceq parse('elif_:_end[T1,TL]) =  'Elif[T1', TL']
if  T1'  := parse (T1) /\
      TL'  := parseL (TL) [print "eq elsif: " TL ] .

*** parse if-else-elif
ceq parse('if_:_end_else:_end[T1,TL,TL2,TL3]) =  'IfElif[T1', TL', TL2' , TL3' ]
if  T1'  := parse (T1) /\
      TL'  := parseL (TL) /\
      TL2'  := parseL (TL2) /\
      TL3'  := parseL (TL3) [print "eq if-else-elif: " TL ] .

*** parse functions

*** parse simple parameters
ceq parse('_:_[T1,T2]) =  'P[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "eq parameters: " T1' ] .

*** parse list parameters
ceq parse('_`,_[TL,TL2]) = 'LParam[TL',TL2']
   if isParam(TL) /\ 
   TL' := parse (TL) /\ 
   TL2' := parse (TL2) [print "eq parameters list: " TL] .

***parse argl
ceq parse('_`,_[TL,TL2]) = 'ArgL[TL',TL2']
   if  TL' := parse (TL) /\ 
   TL2' := parse (TL2) [print "eq argl: " TL TL2 ] .

***parse functions headers

*** parse header init 
ceq parse('_def_`(_`)[T1,T2,TL]) = 'init[ T1' , TL']
if T1' := parse (T1) /\
   S1 := string(T1') /\
   S1 == "@external.Decorator" /\ 
   T2' := parse (T2) /\
   S := string(T2') /\
   S2 := substr(S,0,9) /\
   S2 == "'__init__" /\
   TL' := parse(TL) [print "eq header init: " S ] .

*** parse header init + decorator
ceq parse('__def_`(_`)[T1,T2,T3,TL]) = 'init[T1' , T2' , TL']
   if T1' := parse (T1) /\
      S1 := string(T1') /\
      T2' := parse (T2) /\
      S2 := string(T2') /\
      (S1 == "@external.Decorator" or S2 == "@external.Decorator") /\
      T3' := parse(T3) /\
      S := string(T3') /\
      S4 := substr(S,0,9) /\
      S4 == "'__init__" /\
      TL'  := parse (TL) [print "eq header init + decorator: " S ] .

*** parse header default
ceq parse('__def_`(_`)[T1,T2,T3,T4]) = 'default[T1', T2']
if T1'  := parse (T1) /\
   S1 := string(T1') /\
   S1 == "@external.Decorator" /\
   T2' := parse (T2) /\
   S2 := string(T2') /\
   S2 == "@payable.Decorator" /\
   T3' := parse(T3) /\
   S := string(T3') /\
   S3 := substr(S,0,12) /\
   S3 == "'__default__" /\
   T4' := parse(T4) /\ 
   S4 := string(T4') /\ 
   S4 == "PaV.Parameters" [print "eq header default: " S1 T4' ] .

*** parse header
ceq parse('def_`(_`)[T1,TL]) = 'header[ T1' , TL']
if   T1'  := parse (T1) /\
      TL'  := parse (TL) [print "eq header : " TL ] .

*** parse header + decorator
ceq parse('_def_`(_`)[T1,T2,TL]) = 'headerD[T1', T2', TL']
if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      TL'  := parse (TL)  [print "eq header + decorator: " T1' ] .

*** parse header + 2 decorator
ceq parse('__def_`(_`)[T1,T2,T3,TL]) = 'headerDD[T1', T2', T3', TL']
if  T1'  := parse (T1) /\
   T2'  := parse (T2) /\
   T3'  := parse (T3) /\
   TL'  := parse (TL)  [print "eq header + 2 decorator: "  TL] .

*** parse header + return
ceq parse('def_`(_`)->_[T1,TL,T2]) = 'headerR[T1' , T2' , TL' ]
if  T1'  := parse (T1) /\
   TL'  := parse (TL) /\
   T2'  := parse (T2) [print "eq header return: " TL' ] .

*** parse header + decorator + return
ceq parse('_def_`(_`)->_[T1,T2,TL,T3]) = 'headerDR[T1', T2', T3' , TL']
if  T1'  := parse (T1) /\
   T2'  := parse (T2) /\
   TL'  := parse (TL) /\
   T3'  := parse (T3) [print "eq parse header + decorator + return: " TL' ] .

*** parse header + 2 decorator + return
ceq parse('__def_`(_`)->_[T1,T2,T3,TL,T4]) = 'headerDDR[T1', T2', T3' , T4' ,TL']
if  T1'  := parse (T1) /\
   T2'  := parse (T2) /\
   T3'  := parse (T3) /\
   TL'  := parse (TL) /\
   T4'  := parse (T4) [print "eq header + 2 decorator + return: " T4 ] .

*** header tuple
ceq parse('def_`(_`)->`(_:_`)[T1,TL,T2,T3]) = 'headerT[T1' , T2' , T3' , TL' ]
if  T1'  := parse (T1) /\
      TL'  := parse (TL) /\
      T2'  := parse (T2) /\
      T3'  := parse (T3) [print "eq header tuple:" TL' ] .
      
*** parse header decorator + tuple
ceq parse('_def_`(_`)->`(_:_`)[T1,T2,TL,T3,T4]) = 'headerDT[T1', T2', T3' , T4' ,TL']
if  T1'  := parse (T1) /\
   T2'  := parse (T2) /\
   TL'  := parse (TL) /\
   T3'  := parse (T3) /\
   T4'  := parse (T4) [print "eq decorator + tuple: " TL' ] .

*** parse header 2 decorator + tuple
ceq parse('__def_`(_`)->`(_:_`)[T1,T2,T3,TL, T4, T5 ]) = 'headerDDT[T1', T2', T3', T4', T5' , TL']
if  T1'  := parse (T1) /\
   T2'  := parse (T2) /\
   T3'  := parse (T3) /\
   TL'  := parse (TL)  /\
   T4'  := parse (T4)  /\
   T5'  := parse (T5) [print "eq header 2decorator + tuple :" TL' ] .

*** parse function
ceq parse('_:_end[T1,TL]) = 'Fun[T1' , TL']
if  T1'  := parse (T1) /\
      TL'  := parse (TL) [print "eq parse function: " TL' ] .

***parse body
ceq parse('_;_[T1,TL]) = 'BodyF[T1' , TL']
if  T1'  := parse (T1) /\
      TL'  := parse (TL) [print "eq parse body :" ] .
   
***parse call parametizer
ceq parse('_`(_`)[T1,TL]) = 'CallP[T1',TL']
if  T1'  := parse (T1) /\
   TL'  := parse (TL) [print "eq parse call param function: " TL' ] .

***parse call parametizer  
ceq parse('_`(`)[T1]) = 'Call[T1']
if  T1'  := parse (T1)  [print "eq parse call function: " ] .

*** parse control statements
***parse raise
ceq parse('raise_[T1]) = 'Raise[ T1']
if  T1'  := parse (T1)  [print "eq raise:" T1 ] .

***parse assert
ceq parse('assert_[TL]) = 'Assert[ TL']
if  TL'  := parse (TL)  [print "eq assert: " TL' ] .

***parse assert string
ceq parse('assert_|_[T1,T2]) = 'Assert[ T1' , T2' ]
if  T1'  := parse (T1) /\
      T2'  := parse (T2) [print "eq assert string: " T1' ] .

***parse return
ceq parse('return_[T1]) = 'Return[ T1']
if  T1'  := parse (T1)  [print "eq return:" T1 ] .

***parse return tuple
ceq parse('return_`,_[T1,T2]) = 'ReturnT[ T1' , T2' ]
   if  T1'  := parse (T1) /\
         T2'  := parse (T2) [print "eq return tuple:" T1' ] .

***parse return list
ceq parse('return`[_`][TL]) = 'ReturnL[ TL' ]
   if  TL'  := parse (TL)  [print "eq return list:" TL' ] .

*** tuples
*** parse tuple 
ceq parse('`(_`,_`)=_`(_`)[T1,T2,T3,TL]) = 'tup[T1', T2', T3', TL']
if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      T3'  := parse (T3) /\
      TL'  := parse (TL) [print "eq tuple:" TL ] .

*** parse tuple without ()
ceq parse('_`,_=_`(_`)[T1,T2,T3,TL]) = 'tup[T1', T2', T3', TL']
if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      T3'  := parse (T3) /\
      TL'  := parse (TL) [print "eq tuple without (): " TL ] .

*** parse tuple without () and parameters
ceq parse('`(_`,_`)=_`(`)[T1,T2,T3]) = 'tup[T1', T2', T3']
if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      T3'  := parse (T3) [print "eq without () and parameters: " T3' ] .

*** parse tuple with parameters without ()
ceq parse('_`,_=_`(`)[T1,T2,T3]) = 'tup[T1', T2', T3']
if  T1'  := parse (T1) /\
      T2'  := parse (T2) /\
      T3'  := parse (T3)  [print "eq tuple parameters without (): " T3' ] .

*** parse log event
ceq parse('log_`(_`)[T1,TL]) = 'logE[T1', TL']
   if  T1'  := parse (T1) /\
      TL'  := parse (TL) [print "eq log event: " T1 ] .

*** parse operator
*** parse + .
ceq parse('_+_[T1,T2]) = '_+._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

*** parse - .
ceq parse('_-_[T1,T2]) = '_-._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

*** parse *  .
ceq parse('_*_[T1,T2]) = '_*._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

*** parse <
ceq parse('_<_[T1,T2]) =  '_<._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

*** parse >
ceq parse('_>_[T1,T2]) =  '_>._[T1', T2']
   if  T1'  := parse (T1) /\
      T2' := parse (T2) .

*** parse <=
ceq parse('_<=_[T1,T2]) =  '_<=._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

***parse  >=
ceq parse('_>=_[T1,T2]) = '_>=._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

***parse !=
ceq parse('_!=_[T1,T2]) = '_!=._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

***parse ==
ceq parse('_==_[T1,T2]) = '_==._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

***parse %
ceq parse('_%_[T1,T2]) = '_%._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

***parse /
ceq parse('_/_[T1,T2]) = '_/._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

*** parse not
ceq parse('not_[T1]) = 'not._[T1']
   if  T1'  := parse (T1) .

***parse and
ceq parse('_and_[T1,T2]) = '_and._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

*** paseo or
ceq parse('_or_[T1,T2]) = '_or._[T1', T2']
   if  T1'  := parse (T1) /\
      T2'  := parse (T2) .

*** parse () 
 ceq parse('`(_`)[T1]) = 'PA_PC[T1']
   if  T1'  := parse (T1) .

***parse owise
eq parse(T) =  T  [owise]  .

*** parse termlist
op parseL : TermList -> TermList .
eq parseL(empty) = empty .
eq parseL( (T , TL) ) = parse(T) , parseL (TL) .

***parse bubble
op parseB : TermList -> TermList .
eq parseB(empty) = empty .
eq parseB( (T , TL) ) = parse('token[T]) , parseB (TL) .

*** term to qid list
op downQid : Term -> [Qid] [memo] .
eq downQid(Ct)
   = qid(substr(string(getName(Ct)), 1, length(string(getName(Ct))))) .

*** string is bool
op isBool : String -> Bool .
eq isBool(S) = (S == "True") or (S == "False") .

 ***string is type
op isType : String -> Bool .
eq isType(S) = (S == "int128") or (S == "bool") or (S == "decimal") or (S == "address") or (S == "bytes32") or (S == "String")
or (S == "Bytes") or (S == "struct") or (S == "uint256") or (S == "HashMap") .

***string is Envar
op isEnVar : String -> Bool .
eq isEnVar(S) = (S == "block.coinbase") or (S == "block.difficulty") or (S == "block.number") or (S == "block.prevhash") or (S == "block.timestamp") or (S == "chain.id")
or (S == "msg.gas") or (S == "msg.sender") or (S == "msg.value") or (S == "tx.origin") or (S == "msg.data") .

***string is constant
op isConstant : String -> Bool .
eq isConstant(S) = (S == "ZERO-ADDRESS") or (S == "EMPTY-BYTES32") or (S == "MAX-INT128") or (S == "MIN-INT128") or (S == "MAX-DECIMAL") or (S == "MIN-DECIMAL")
or (S == "MAX-UINT256")  .

*** string is Decorator
op isDecorador : String -> Bool .
eq isDecorador(S) = (S == "@external.@Decorator@") or (S == "@internal.@Decorator@") or (S == "@pure.@Decorator@") or (S == "@view.@Decorator@") or (S == "@payable.@Decorator@") or (S == "@nonpayables.@Decorator@") .

*** string is control flow
op isControlFlow : String -> Bool .
eq isControlFlow(S) = (S == "break.@StatementControl@") or (S == "continu.@StatementControl@") or (S == "return.@StatementControl@") . 

*** term is num
op isNum : Term -> Bool .
eq isNum(Ct) = (getType(Ct) ==  'Float) or (getType(Ct) ==  'Nat) or (getType(Ct) ==  'Zero) or (getType(Ct) ==  'NzNat) .

***termlist is fun
op isFun : TermList -> Bool .
eq isFun(empty) = false .
eq isFun((T,TL)) = isFunU(T) .
op isFunU : Term -> Bool .
eq isFunU('_:_end[T,TL]) = true .
eq isFunU(T) = false .

*** termlist is elif
op isElif : TermList -> Bool .
eq isElif(empty) = false .
eq isElif((T,TL)) = isElifU(T) .
op isElifU : Term -> Bool .
eq isElifU('elif_:_end[T,TL]) = true .
eq isElifU(T) = false .

*** termlist is param
 op isParam : TermList -> Bool .
 eq isParam(empty) = false .
 eq isParam((T,TL)) = isParamU(T) .
 op isParamU : Term -> Bool .
 eq isParamU('_:_[T,T1]) = true .
 eq isParamU(T) = false .

***termlist is contract
 op isContract : TermList -> Bool .
 eq isContract((T,TL)) = isContractU(T) [print "is CONTRACT" T] .
 eq isContract(empty) = false .
 op isContractU : Term -> Bool .
 eq isContractU('__[TL]) = true .
 eq isContractU(T) = false .

endfm

mod MTP is
 inc STD-STREAM .
 pr  CONVERSION .
 pr META-SIGN .
 pr  LEXICAL .
 pr PARSING .
 inc FILE .
 

 vars Text Original Read Source S St St1 St2 : String .
 var  Attrs : AttributeSet .
 vars FHIn FHOut : Oid .
 var  QIL QIL1 QIL2 QIL3 : QidList .
 vars T T' T2 T3 T4 T5 : Term .
 var  M : Module .
 vars N N' : Nat .
 var  Ty : Type .
 var  Q : Qid .
 var TL : TermList .
 var B B1 MF MF1 S1 S2 V V1 M1 M2 : Term .
 var st : State .
 var C errorC : Contract .

 *** Object and class definition
 op EXAMPLE : -> Cid [ctor] .
 op example : -> Oid [ctor] .

 op noFile : -> Oid [ctor] .

 *** Attributes
 op file:_ : Oid -> Attribute [ctor] .
 op read:_ : String -> Attribute [ctor] .
 op state:_ : State -> Attribute [ctor] .
 op terms:_ : TermList -> Attribute [ctor gather (&)] .
 op functionName:_ : Qid -> Attribute [ctor] .
 op parameters:_ : Term -> Attribute [ctor] .
 op context:_ : TermList -> Attribute [ctor] .

 sort State .
 ops idle reading parsing writing closing asking askingParameters readingAsking : -> State [ctor] .

 *** Run command
 op run : -> Configuration [ctor] .

 ***                        ***
 ***          LOAD          ***
 ***                        ***

 crl [loadComm] :
    gotLine(example, stdin, Text)
    < example : EXAMPLE | state: idle, Attrs >
 => < example : EXAMPLE | state: idle, Attrs >
    openFile(fileManager, example, Source, "r")
  if Q := tokenize(Text) /\
     Source := printTokens(Q) [print "regla1"] .

 crl [loadCommERROR] :
    gotLine(example, stdin, Text)
    < example : EXAMPLE | state: idle, Attrs >
 => < example : EXAMPLE | state: idle, Attrs >
    write(stdout, example, "File name incorrect.\n")
  if Q QIL := tokenize(Text) /\
     QIL =/= nil [print "regla2"] .

 rl [openedFile] :
    openedFile(example, fileManager, FHIn)
    < example : EXAMPLE | file: noFile, state: idle, Attrs >
 => < example : EXAMPLE | file: FHIn, state: reading, Attrs >
    getLine(FHIn, example) [print "regla3"] .

 rl [openFileError] :
    fileError(example, fileManager, Text)
    < example : EXAMPLE | Attrs >
 => < example : EXAMPLE | Attrs >
    write(stdout, example, Text + "\n") [print "regla4"] .

 ***                           ***
 ***          GotLine          ***
 ***                           ***


rl [newLine] :
   gotLine(example, FHIn, Text)
   < example : EXAMPLE | file: FHIn, read: Read, state: reading, Attrs >
=> if Text == ""
   then < example : EXAMPLE | file: FHIn, read: Read, state: parsing , Attrs >
   else < example : EXAMPLE | file: FHIn, read: (Read + Text + " ; "), state: reading, Attrs >
        getLine(FHIn, example)
   fi [print "regla5" ] .

 ***                           ***
 ***          Parsing          ***
 ***                           ***

crl [parsing] :
    < example : EXAMPLE | file: FHIn , read: Read, state: parsing, Attrs >
 => < example : EXAMPLE | file: noFile , read: "", state: asking , terms: T' ,context: empty, Attrs >
    getLine(stdin, example, "Introduce function name> ")
 if Read =/= "" /\
    QIL := tokenize(Read) /\
    QIL1 := preparse(QIL)  /\
    {T, Ty} := metaParse(GRAMMAR, QIL1, '@Contract@) /\
    T' := parse(T) [print "PREPARSE " QIL1  "\n" "METAPARSE " T "\n" "PARSE " T'] .

 ***                           ***
 ***          IO               ***
 ***                           ***

crl [asking] :
    gotLine(example, stdin, Text)
    < example : EXAMPLE | state: asking, Attrs >
 => < example : EXAMPLE | state: askingParameters, functionName: Q, parameters: 'argV.ArgList, Attrs >
    getLine(stdin, example, "Introduce arguments> ")
  if Text =/= " \n" /\
  Q := tokenize(Text) [print "rule asking parameters"] .

crl [askingParameters] :
    gotLine(example, stdin, Text)
    < example : EXAMPLE | state: askingParameters, parameters: TL, Attrs >
 => < example : EXAMPLE | state: askingParameters, parameters: ('ArgL[TL , T]) , Attrs >
    getLine(stdin, example, "Introduce parameters> ")
  if Text =/=  " \n" /\
   QIL := tokenize(Text) /\
   {T, Ty} := metaParse(upModule('MY-PROG,true), QIL, anyType) [print "rule asking parameters T " T " TY " Ty] .

crl [askingParametersEmptyFT] :
    gotLine(example, stdin, Text)
    < example : EXAMPLE | state: askingParameters, functionName: Q, parameters: T, terms: T3, context: empty, Attrs >
 => < example : EXAMPLE | state: readingAsking, context: T2, Attrs >
   write(stdout, example, St2 + "\n")
  if Text == " \n" /\ 
   T' := if T == 'argV.ArgList then 'Call[qid("'" + string(Q) + ".Qid")] else 'CallP[qid("'" + string(Q) + ".Qid") , T]  fi /\ 
   T4 := 'exec[T3, T'] /\
   {T2, Ty} := metaRewrite(upModule('SEMANTICS, true), T4, unbounded) /\ 
   '<_`,_`,_`,_`,_>[B, MF, S1, V, M1] := T2  /\ 
   QIL1 := metaPrettyPrint(upModule('SEMANTICS, true), S1 , mixfix number rat) /\
   S := printTokens(QIL1) /\
   QIL2 := metaPrettyPrint(upModule('SEMANTICS, true), V , mixfix number rat) /\
   St := printTokens(QIL2) /\
   QIL3 := metaPrettyPrint(upModule('SEMANTICS, true), M1 , mixfix number rat) /\
   St1 := printTokens(QIL3) /\
   St2 := "La pila despues de aplicar los cambios: " + S + "\n" + "Valor devuelto por la función(noneV si no hay) "  + St + "\n"
   + "Struct devuelto por la funcion(mv si no hay): " +  St1 [print " qil " T2 " S1 " S1 " V " V  "MV" M1 "t'" T' "QIL" QIL1 " S " S " St " St] . ***[print "rule asking parameters T " T " TY " Ty " t2 " T2 ] .

crl [askingParametersEmptyOT] :
    gotLine(example, stdin, Text)
    < example : EXAMPLE | state: askingParameters, functionName: Q, parameters: T, context: T5, Attrs >
 => < example : EXAMPLE | state: readingAsking, context: T2, Attrs >
  write(stdout, example, St2 + "\n")
  if Text == " \n" /\ 
   T' := if T == 'argV.ArgList then 'Call[qid("'" + string(Q) + ".Qid")] else 'CallP[qid("'" + string(Q) + ".Qid") , T]  fi /\ 
   '<_`,_`,_`,_`,_>[B, MF, S1, V, M1] := T5 /\
   T4 := '<_`,_`,_`,_`,_>[T', MF, S1, 'noneV.NoneValue, 'mv.Memory] /\
   {T2, Ty} := metaRewrite(upModule('SEMANTICS, true), T4, unbounded) /\
   '<_`,_`,_`,_`,_>[B1, MF1, S2, V1, M2] := T2 /\
   QIL1 := metaPrettyPrint(upModule('SEMANTICS, true), S2 , mixfix number rat) /\
   S := printTokens(QIL1) /\
   QIL2 := metaPrettyPrint(upModule('SEMANTICS, true), V1 , mixfix number rat) /\
   St := printTokens(QIL2) /\
   QIL3 := metaPrettyPrint(upModule('SEMANTICS, true), M2 , mixfix number rat) /\
   St1 := printTokens(QIL3) /\
   St2 := "La pila despues de aplicar los cambios: " + S + "\n" + "Valor devuelto por la función(noneV si no hay) "  + St + "\n"
   + "Struct devuelto por la funcion(mv si no hay): " +  St1 [print " qil " S2 " " V] .

rl [readingAsking] :
< example : EXAMPLE | state: readingAsking, Attrs >
wrote(example, stdout) =>
< example : EXAMPLE | state: asking, Attrs >
getLine(stdin, example, "Introduce function name> ") .

 ***                           ***
 ***          END              ***
 ***                           ***

crl [END] :
    gotLine(example, stdin, Text)
    < example : EXAMPLE | state: asking, Attrs >
 => write(stdout, example, "chao.\n")
  if Text == " \n"  [print "rule end"] .

var RP? : [ResultPair] .

crl [parsingError] :
    < example : EXAMPLE | file: FHIn , read: Read, state: parsing, Attrs >
 => < example : EXAMPLE | read: "", Attrs >
 if Read =/= "" /\
    QIL := tokenize(Read) /\
    QIL1 := preparse(QIL) /\
    RP? := metaParse(GRAMMAR, QIL1, anyType) [print "regla 6" QIL1 "\nNo parseado: " RP?] .

 rl [closedFile] :
    closedFile(example, FHOut)
    < example : EXAMPLE | file: FHOut, state: closing , terms: T , read: S , Attrs >
 => < example : EXAMPLE | file: noFile, state: closing , terms: T , read: S , Attrs > [print "regla9"] .

 ***                          ***  
 ***          WROTE           ***
 ***                          ***

 crl [wrote] :
    wrote(example, stdout)
    < example : EXAMPLE | file: noFile, state: st, Attrs >
 => < example : EXAMPLE | file: noFile, state: st, Attrs > 
   if st =/= readingAsking .

 ***                        ***
 ***          RUN           ***
 ***                        ***

 eq run =
    <> < example : EXAMPLE | file: noFile, read: "", state: idle >
    getLine(stdin, example, "Introduce file name> ") .
endm

set print attribute on .
erew run .