struct Voter:
    weight: int128
    voted: bool
    delegate: address
    vote: int128
end
struct Proposal:
    name: bytes32
    voteCount: int128
end
voters: public(HashMap[address, Voter])
proposals: public(HashMap[int128, Proposal])
voterCount: public(int128)
chairperson: public(address)
int128Proposals: public(int128)
@view
@internal
def _delegated(addr: address) -> bool:
   return self.voters[addr].delegate != ZERO_ADDRESS
end
@view
@external
def delegated(addr: address) -> bool:
    return self._delegated(addr)
end
@view
@internal
def _directlyVoted(addr: address) -> bool:
    return self.voters[addr].voted and (self.voters[addr].delegate == ZERO_ADDRESS)
end
@view
@external
def directlyVoted(addr: address) -> bool:
    return self._directlyVoted(addr)
end
@external
def __init__(_proposalNames: bytes32[2]):
    self.chairperson = msg.sender
    self.voterCount = 0
    for i in range(2):
        self.proposals[i] = Proposal({ name: _proposalNames[i], voteCount: 0})
        self.int128Proposals += 1
    end ;
end
@external
def giveRightToVote(voter: address):
    assert msg.sender == self.chairperson
    assert not self.voters[voter].voted
    assert self.voters[voter].weight == 0
    self.voters[voter].weight = 1
    self.voterCount += 1
end
@internal
def _forwardWeight(delegate_with_weight_to_forward: address):
    assert self._delegated(delegate_with_weight_to_forward)
    assert self.voters[delegate_with_weight_to_forward].weight > 0
    target: address = self.voters[delegate_with_weight_to_forward].delegate
    for i in range(4):
        if self._delegated(target):
            target = self.voters[target].delegate
            assert target != delegate_with_weight_to_forward
        else:
            break
        end ;
    end ;
    weight_to_forward: int128 = self.voters[delegate_with_weight_to_forward].weight
    self.voters[delegate_with_weight_to_forward].weight = 0
    self.voters[target].weight += weight_to_forward
    if self._directlyVoted(target):
        self.proposals[self.voters[target].vote].voteCount += weight_to_forward
        self.voters[target].weight = 0
    end ;
end
@external
def forwardWeight(delegate_with_weight_to_forward: address):
    self._forwardWeight(delegate_with_weight_to_forward)
end
@external
def delegate(to: address):
    assert not self.voters[msg.sender].voted
    assert to != msg.sender
    assert to != ZERO_ADDRESS
    self.voters[msg.sender].voted = True
    self.voters[msg.sender].delegate = to
    self._forwardWeight(msg.sender)
end
@external
def vote(proposal: int128):
    assert not self.voters[msg.sender].voted
    assert proposal < self.int128Proposals
    self.voters[msg.sender].vote = proposal
    self.voters[msg.sender].voted = True
    self.proposals[proposal].voteCount += self.voters[msg.sender].weight
    self.voters[msg.sender].weight = 0
end