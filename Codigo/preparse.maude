fmod PREPARSE is
 pr CONVERSION .
 pr QID-LIST .

 var S S1 S2 S3 S4 : QidList .
 var Q Q1 Q' : Qid .
 var N : Nat .
 vars St St' St1 : String .
 op preparse : QidList -> QidList .
 ***aÃ±adir PAV en los parentesis vacios que vengan con un def
 eq preparse(S1 'def S '`( '`) S2) = preparse(S1) 'def preparse(S) '`( 'PaV '`) preparse(S2) .
*** eliminar self.
ceq preparse(S Q S1) = preparse(S Q' S1)
 if St := string(Q) /\
    N := find(St, "self.", 0) /\
    St' := substr(St, N + 5, length(St)) /\
    Q' := qid(St') .
***op preparse : QidList -> QidList .
ceq preparse(S) = preparseFinal(S2 S3)
 if S1 := hastaPrimerDef(S) /\
    S2 := preparseAntes(S1) /\
    S3 := despuesPrimerDef(S) .
eq preparse(S) = S [owise] .
op hastaPrimerDef : QidList -> QidList .
eq hastaPrimerDef('def S) = nil .
eq hastaPrimerDef(Q S) = Q hastaPrimerDef(S) [owise] .
eq hastaPrimerDef(nil) = nil .

op despuesPrimerDef : QidList -> QidList .
eq despuesPrimerDef('def S) = 'def S .
eq despuesPrimerDef(Q S) = despuesPrimerDef(S) [owise] .

*** sustituir : por ::
op preparseAntes : QidList -> QidList .
eq preparseAntes(S ': S1) = preparse(S ':: S1) .


op preparseFinal : QidList -> QidList .
eq preparseFinal('`def S '`( '`) S2) = '`def preparseFinal(S) '`( 'PaV '`) preparseFinal(S2) .
*** eliminar self.
ceq preparseFinal(S Q S1) = preparseFinal(S Q' S1)
 if St := string(Q) /\
    N := find(St, "self.", 0) /\
    St' := substr(St, N + 5, length(St)) /\
    Q' := qid(St') .

ceq preparseFinal(S Q S1) = preparseFinal(S Q' Q1 S1)
 if Q =/= ': /\
    St := string(Q) /\
    N := find(St, ":", 0) /\
    St' := substr(St, 0, N) ) /\
    St1 := substr(St, N + 1, length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) .
eq preparseFinal(S) = S [owise] .
endfm
*** quitar self.
--- vars QIL QIL' : QidList .
--- var  Q : Qid .
--- vars S S' : String .

--- ceq preparse(QIL Q QIL') = preparse(QIL Q' QIL')
---  if S := string(Q) /\
---     N := find(S, "self.", 0) /\
---     S' := substr(S, N, len(S)) /\
---     Q' := qid(S') .
*** sustituir  : por ::
--- vars QIL QIL' : QidList .
--- var  Q : Qid .
--- vars S S' : String .

--- ceq preparse(QIL Q QIL') = preparse(QIL Q' QIL')
---  if S := string(Q) /\
---     N := find(S, "self.", 0) /\
---     S' := substr(S, N, len(S)) /\
---     Q' := qid(S') .

--- op preparse : QidList -> QidList .
--- ceq preparse(QIL) = preparseFinal(QIL'' QIL''')
---  if QIL' := hastaPrimerDef(QIL) /\
---     QIL'' := preparseAntes(QIL') /\
---     QIL''' := despuesPrimerDef(QIL)  .

--- op hastaPrimerDef : QidList -> QidList .
--- ceq hastaPrimerDef(Q QIL) = Q hastaPrimerDef