fmod PREPARSE is
 pr CONVERSION .
 pr QID-LIST .

 var S S1 S2 S3 S4 S5 : QidList .
 var Q Q1 Q' Q2 : Qid .
 var N N1 : Nat .
 vars St St' St1 St2 : String .
 op preparse : QidList -> QidList .

***preparse -> clean code .
ceq preparse(S) = lastPreparse(S3 S5)
 if S1 := PrePreparse(S) /\ 
    S2 := untilFirstDef(S1) /\
    S3 := preparseBefore(S2) /\
    S4 := afterFirstDef(S1) /\ 
    S5 := preparseAfter(S4) .
eq preparse(S) = S [owise] .

***first preparse
op PrePreparse : QidList -> QidList .

*** replace assert , -> assert |
eq PrePreparse( S 'assert S1 '`, Q '; S2) = PrePreparse( S 'assert S1 '| Q '; S2 ) .

*** replace continue -> continu
ceq PrePreparse(S Q S1) = PrePreparse(S Q' S1)
 if St := string(Q) /\
    isContinue(St)  /\
    St' := substr(St, 0, length(St) - 1) /\
    Q' := qid(St') [print "eq continue" Q'] .

***replace _ -
ceq PrePreparse(S Q S1) = PrePreparse(S Q' S1)
 if St := string(Q) /\
    isConstant(St)  /\
    N := find(St, "_", 0) /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N + 1, length(St) ) /\
    St2 := St' + "-" + St1 /\
    Q' := qid(St2) [print "eq - -> _" Q'] .

***replace else: -> else :
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= ': /\
    St := string(Q) /\
    St =/= "else:" /\
    N := find(St, ":", 0) /\
    N =/= 0 /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1)  .

*** replace x:y x : y
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= ': /\
    St := string(Q) /\
    St =/= "else:" /\
    N := find(St, ":", 0) /\
    N == 0 /\
    St' := substr(St, 0, 1) /\
    St1 := substr(St, 1 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) .

*** replace x-> z ->
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '-> /\
    St := string(Q) /\
    N := find(St, "->", 0) /\
    St' := substr(St, 0, 2) /\
    St1 := substr(St, 2 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) .

*** replace x= -> x =
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '= /\
    St := string(Q) /\
    N := find(St, "=", 0) /\
    N =/= 0 /\
    substr(St, N - 1, 1 )  =/= "+" /\
    substr(St, N - 1, 1 )  =/= "-" /\
    substr(St, N + 1, 1 )  =/= "=" /\
    substr(St, N - 1, 1 )  =/= "<" /\
    substr(St, N - 1, 1 )  =/= ">" /\
    substr(St, N - 1, 1 )  =/= "!" /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print "x= -> x = " St] .

*** replace =x -> = x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '= /\
    St := string(Q) /\
    N := find(St, "=", 0) /\
    N == 0 /\
    substr(St, 1, 1) =/= "=" /\
    St' := substr(St, 0, 1) /\
    St1 := substr(St, 1 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print "=x -> = x" Q]  .

*** replace x== -> x ==
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '== /\
    St := string(Q) /\
    N := find(St, "==", 0) /\
    N =/= 0 /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print "x== -> x == " St] .

*** replace ==x -> == x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '==  /\
    St := string(Q) /\
    N := find(St, "==", 0) /\
    N == 0 /\
    St' := substr(St, 0, 2) /\
    St1 := substr(St, 2 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print "==x -> ==x " Q  Q1] .

*** replace x+= -> x +=
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '+= /\
    St := string(Q) /\
    N := find(St, "+=", 0) /\
    N =/= 0 /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print Q' Q1 "x+= -> x += "] .

*** replace +=x -> += x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 ***if ((Q =/= '+=) or (Q =/= '-= )) /\
 if Q =/= '+=  /\
    St := string(Q) /\
    N := find(St, "+=", 0) /\
    N == 0 /\
    St' := substr(St, 0, 2) /\
    St1 := substr(St, 2 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print "+=x -> +=x " Q  Q1]  .

*** replace x<= -> x <=
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '<= /\
    St := string(Q) /\
    N := find(St, "<=", 0) /\
    N =/= 0 /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print Q' Q1 " x<= -> x <= "] .

*** replace <=x -> <= x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '<=  /\
    St := string(Q) /\
    N := find(St, "<=", 0) /\
    N == 0 /\
    St' := substr(St, 0, 2) /\
    St1 := substr(St, 2 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print "<=x -> <= x " Q  Q1] .

*** replace x>= -> x >=
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '>= /\
    St := string(Q) /\
    N := find(St, ">=", 0) /\
    N =/= 0 /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print Q' Q1 "x>= -> x >= "] .

*** replace >=x -> >= x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '>=  /\
    St := string(Q) /\
    N := find(St, ">=", 0) /\
    N == 0 /\
    St' := substr(St, 0, 2) /\
    St1 := substr(St, 2 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print ">=x -> >= x " Q  Q1]  .

*** replace x!= -> x !=
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '!= /\
    St := string(Q) /\
    N := find(St, "!=", 0) /\
    N =/= 0 /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print Q' Q1 "replace !=x -> != x"] .

*** replace !=x -> != x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '!=  /\
    St := string(Q) /\
    N := find(St, "!=", 0) /\
    N == 0 /\
    St' := substr(St, 0, 2) /\
    St1 := substr(St, 2 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print "!=x -> != x " Q  Q1]  .

*** replace x+ -> x +
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '+ /\
    St := string(Q) /\
    N := find(St, "+", 0) /\
    N =/= 0 /\
    substr(St, N, 1)  =/= "=" /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\ 
    Q' := qid(St') /\
    Q1 := qid(St1)  [print "x+ -> x +" N ] .

*** replace +x -> + x 
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '+ /\
    St := string(Q) /\
    N := find(St, "+", 0) /\
    N == 0 /\
    substr(St, 1, 1) =/= "=" /\
    St' := substr(St, 0, 1) /\
    St1 := substr(St, 1 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) [print "+x -> + x "] .

*** replace x< -> x <
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '< /\
    St := string(Q) /\
    N := find(St, "<", 0) /\
    N =/= 0 /\
    substr(St, N, N + 1)  =/= "=" /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1)  .

*** replace <x -> < x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '< /\
    St := string(Q) /\
    N := find(St, "<", 0) /\
    N == 0 /\
    substr(St, 1, 2 ) =/= "=" /\
    St' := substr(St, 0, 1) /\
    St1 := substr(St, 1 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) .

***replace >x -> > x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '> /\
    St := string(Q) /\
    N := find(St, ">", 0) /\
    N =/= 0 /\
    substr(St, N, N + 1)  =/= "=" /\
    substr(St, 0, N )  =/= "-" /\
    St' := substr(St, 0, N) /\
    St1 := substr(St, N , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) .

*** replace <x -> < x
ceq PrePreparse(S Q S1) = PrePreparse(S Q' Q1 S1)
 if Q =/= '< /\
    St := string(Q) /\
    N := find(St, "<", 0) /\
    N == 0 /\
    substr(St, 1, 2 ) =/= "=" /\
    St' := substr(St, 0, 1) /\
    St1 := substr(St, 1 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) .

***preprearse owise
eq PrePreparse(S) = S [owise] .

*** code before first def
op untilFirstDef : QidList -> QidList .
eq untilFirstDef('def S) = nil .
eq untilFirstDef(nil) = nil .
eq untilFirstDef(Q S) = Q untilFirstDef(S) [owise] .

*** code after first def
op afterFirstDef : QidList -> QidList .
eq afterFirstDef('def S) = 'def S .
eq afterFirstDef(nil) = nil .
eq afterFirstDef(Q S) = afterFirstDef(S) [owise] .

*** Preparse before first def .
op preparseBefore : QidList -> QidList .
eq preparseBefore(S ': S1) = preparseBefore(S ':: S1) .
eq preparseBefore(S '; S1) = preparseBefore(S S1) .
eq preparseBefore(S) = S [owise] .

*** preparse after first def .
op preparseAfter : QidList -> QidList .

eq preparseAfter(S '; 'else: S1) = preparseAfter(S 'else: S1) .
eq preparseAfter(S '; 'elif ) = preparseAfter(S 'elif) .
eq preparseAfter(S '; 'elif S1) = preparseAfter(S 'elif S1) .

eq preparseAfter(S ': '; S1) = preparseAfter(S ': S1) .
eq preparseAfter(S 'else: '; S1) = preparseAfter(S 'else: S1) .
eq preparseAfter(S '; 'end ) = preparseAfter(S 'end) .
eq preparseAfter(S '; 'end S1) = preparseAfter(S 'end S1) .
eq preparseAfter(S 'end ';) = preparseAfter(S 'end) . 
eq preparseAfter(S 'end '; '; ) = preparseAfter(S) 'end '; .
ceq preparseAfter(S 'end '; Q S1 ) = preparseAfter(S 'end Q S1) 
    if Q =/= '; .
eq preparseAfter(S 'end '; '; S1 ) = preparseAfter(S 'end ) '; preparseAfter(S1) .  
ceq preparseAfter(S Q '; S1) = preparseAfter(S Q S1 ) 
if    St := string(Q) /\
      N := find(St, "@", 0) .
ceq preparseAfter(S Q S1) = preparseAfter(S Q' Q1  S1)
 if Q =/= '. /\
    St := string(Q) /\
    N := find(St, ".", 0) /\
    N == 0 /\
    St' := substr(St, 0, 1) /\
    St1 := substr(St, 1 , length(St) ) /\
    Q' := qid(St') /\
    Q1 := qid(St1) .

eq preparseAfter(S) = S [owise] .

*** last preparse
op lastPreparse : QidList -> QidList .
 eq lastPreparse(S1 'def S '`( '`) S2) = lastPreparse(S1) 'def lastPreparse(S) '`( 'PaV '`) lastPreparse(S2) .

*** drop self.
ceq lastPreparse(S Q S1) = lastPreparse(S Q' S1)
 if St := string(Q) /\
    N := find(St, "self.", 0) /\
    St' := substr(St, N + 5, length(St)) /\
    Q' := qid(St') .
eq lastPreparse(S) = S [owise] .

op isConstant : String -> Bool .
eq isConstant(St) = (St == "ZERO_ADDRESS") or (St == "EMPTY_BYTES32") or (St == "MAX_INT128") or (St == "MIN_INT128") or (St == "MAX_DECIMAL") or (St == "MIN_DECIMAL") or (St == "MAX_UINT256") .
op isContinue : String -> Bool .
eq isContinue(St) = (St == "continue")  .
endfm